import{_ as e,c as t,o as a,d as i}from"./app.7cf9e878.js";const m=JSON.parse(`{"title":"SRE Science | Service Reliability","description":"","frontmatter":{"title":"SRE Science | Service Reliability","editLink":false,"head":[["meta",{"name":"Service Reliability"},{"content":"Service reliability is equal to the weighted sum of the probabilities of actual state transitions of a service complying with its expected state transitions.\\n"}]]},"headers":[{"level":2,"title":"Tr_Expected","slug":"tr-expected","link":"#tr-expected","children":[]},{"level":2,"title":"Concrete Example","slug":"concrete-example","link":"#concrete-example","children":[]},{"level":2,"title":"Tr_Actual","slug":"tr-actual","link":"#tr-actual","children":[]},{"level":2,"title":"Tr_Target","slug":"tr-target","link":"#tr-target","children":[]},{"level":2,"title":"Service Reliability","slug":"service-reliability-1","link":"#service-reliability-1","children":[]},{"level":2,"title":"Choosing Tr_Expected","slug":"choosing-tr-expected","link":"#choosing-tr-expected","children":[]},{"level":2,"title":"Concrete Example","slug":"concrete-example-1","link":"#concrete-example-1","children":[]},{"level":2,"title":"Finding Service Reliability's Value","slug":"finding-service-reliability-s-value","link":"#finding-service-reliability-s-value","children":[]}],"relativePath":"documentation/service-reliability.md","lastUpdated":1711000095000}`),s={name:"documentation/service-reliability.md"},r=i(`<h1 id="service-reliability" tabindex="-1">Service Reliability? <a class="header-anchor" href="#service-reliability" aria-hidden="true">#</a></h1><blockquote><p><strong>Formal Definition</strong>: Service reliability is equal to the weighted sum of the probabilities of actual state transitions of a service complying with its expected state transitions.</p></blockquote><p>Before we can define service reliability we have to define first a few other important characteristics of a <a href="/documentation/service.html">service</a>.</p><h2 id="tr-expected" tabindex="-1">Tr_Expected <a class="header-anchor" href="#tr-expected" aria-hidden="true">#</a></h2><p>A set of <a href="/documentation/service-state.html">service state</a> transitions that are expected to happen during a <a href="/documentation/service-state.html#service-state-lifetime">service&#39;s lifetime</a>.</p><p><code>Tr_Expected = {TrE\u2080, TrE\u2081,\u2026,TrE\u1D62}</code></p><p>Each service state transition TrE\u1D62 is a triple composed of the start state, end state, and the input which when consumed by the start state will cause it to transition to the end state.</p><p><code>TrE\u1D62 = {TrE_StartState\u1D62, TrE_EndState\u1D62, TrE_Input\u1D62}</code></p><h2 id="concrete-example" tabindex="-1">Concrete Example <a class="header-anchor" href="#concrete-example" aria-hidden="true">#</a></h2><p>In practice, these expected service state transitions are the expected behavior of any aspect of a service due to how it was designed as a software service solving a particular business problem. For example, an online banking website must enable its users to log in (start state) using a login form, and when the login is successful it must present the user with a home page (end state) that contains a summary of that user&#39;s transactions.</p><h2 id="tr-actual" tabindex="-1">Tr_Actual <a class="header-anchor" href="#tr-actual" aria-hidden="true">#</a></h2><p>A set of service state transitions that have happened during a service&#39;s lifetime.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">Tr_Actual = {TrA\u2080, TrA\u2081,\u2026,TrA\u1D62}</span></span>
<span class="line"><span style="color:#A6ACCD;">TrA\u1D62 = {TrA_Instance\u2080, TrA_Instance\u2081,\xA0\u2026, TrA_Instance\u1D62}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Tr_Actual&#39;s member TrA\u1D62 is a set of service state transitions that have happened in a service&#39;s lifetime. Each of these state transitions is called a TrA_Instance.</p><blockquote><p><strong>Important</strong> TrE\u1D62 expects compliance for every TrA_Instance\u1D62.</p></blockquote><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">TrA_Instance\u1D62 = {TrE_StartState\u1D62, TrE_EndState\u2093, TrE_Input\u1D62}</span></span>
<span class="line"><span style="color:#A6ACCD;">TrE\u1D62 = {TrE_StartState\u1D62, TrE_EndState\u1D62, TrE_Input\u1D62}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Given TrA_Instance\u1D62 and TrE\u1D62, x in TrE_Endstate subscript is a variable because there can be varied end states in actual state transitions in a service.</p><p>The following is the TrE_Compliance function that returns a value of 0 or 1 where 0 means TrA_Instance\u1D62 has failed to comply to TrE\u1D62, otherwise 1 means the opposite.</p><p><code>TrE_Compliance(TrA_Instance\u1D62, TrE\u1D62) = 1 or 0</code></p><blockquote><p><strong>Important</strong> When TrE_EndState\u2093 is equal to TrE_EndState\u1D62, then TrA_Instance\u1D62 is equal to TrE\u1D62. In this case, TrE_Compliance is equal to 1, otherwise 0.</p></blockquote><h2 id="tr-target" tabindex="-1">Tr_Target <a class="header-anchor" href="#tr-target" aria-hidden="true">#</a></h2><p>A set of target service state transition probabilities.</p><p>A member of Tr_Target is a probability of an actual state transition to comply with its corresponding expected state transition. As you might see now the instances of Tr_Actual&#39;s members can be viewed as probabilistic events therefore we can calculate their probabilities.</p><p>An example of a Tr_Target with concrete probability values.</p><p><code>Tr_Target = {P(TrA, TrE)\u2080 = 0.99, P(TrA, TrE)\u2081 = 0.95,\u2026,P(TrA, TrE)\u1D62 = 0.999}</code></p><p>At this point, we can now define service reliability or SR.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">SR = P(TrA, TrE)\u2080 * RW\u2080 + P(TrA, TrE)\u2081 * RW\u2081 +\xA0\u2026 P(TrA, TrE)\u1D62 * RW\u1D62\xA0, or</span></span>
<span class="line"><span style="color:#A6ACCD;">SR = RW * Tr_Target</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Where RW\u1D62 or reliability weight is a weight that denotes the importance of a certain state transition compliance. We can now, therefore, define service reliability.</p><h2 id="service-reliability-1" tabindex="-1">Service Reliability <a class="header-anchor" href="#service-reliability-1" aria-hidden="true">#</a></h2><p>The weighted sum of the probabilities of actual state transitions of a service complying with its expected state transitions.</p><h2 id="choosing-tr-expected" tabindex="-1">Choosing Tr_Expected <a class="header-anchor" href="#choosing-tr-expected" aria-hidden="true">#</a></h2><p>So far the definition of service reliability is agnostic to the perspective of which <a href="/documentation/service-modifier.html">service modifier</a> perceives it. This is an important feature because in practice <strong>which perspective matters is usually a business choice</strong>.</p><p>However, most of the time if not all of the time, SRE Science chooses the perspective of the typical human user or &quot;the customer&quot; as a business would call it. The reason for this is that the human user&#39;s service requirements are the ultimate reason why services exist and consequently why service reliability is necessary.</p><p><strong>Tr_Expected must be primarily viewed from the perspective of a human service user that can be equated to a customer of a concrete example of a business providing software services.</strong></p><h2 id="concrete-example-1" tabindex="-1">Concrete Example <a class="header-anchor" href="#concrete-example-1" aria-hidden="true">#</a></h2><p>Using our <a href="/documentation/service.html#naive-cloud-storage-service-example">naive cloud storage service</a> example, we can see that the <strong>UploadProgress</strong> state has a field called <strong>expect</strong>. This field describes Tr_Expected.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">- name: UploadInProgress</span></span>
<span class="line"><span style="color:#A6ACCD;">description: Service is uploading chunks of client file data.</span></span>
<span class="line"><span style="color:#A6ACCD;">expect:</span></span>
<span class="line"><span style="color:#A6ACCD;">    - User must be presented with an upload progress widget updated with progress values from 0% to 100% in real-time</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Looks familiar? This is fundamentally a Product Owner&#39;s acceptance criteria in the world of Scrums.</p><h2 id="finding-service-reliability-s-value" tabindex="-1">Finding Service Reliability&#39;s Value <a class="header-anchor" href="#finding-service-reliability-s-value" aria-hidden="true">#</a></h2><p>As you might notice, this is where Service Reliability&#39;s value can be found, from the perspective of a customer, otherwise what is the value of 99.999% reliable system if it cannot be calculated directly to a customer&#39;s experience? It is important to mention that there are great architectural patterns for improving reliability that became design conventions from a service design point-of-view, however, in practice, their effects are in a wide spectrum of cost efficiency and customer satisfaction, therefore from a business perspective, their negative effects can be either operationally costly or unnecessary. We may loosely call these effects <strong>service entropy</strong> especially if their effects are difficult to quantify from a reliability perspective.</p>`,40),n=[r];function c(o,l,p,h,d,u){return a(),t("div",null,n)}const v=e(s,[["render",c]]);export{m as __pageData,v as default};
