import{_ as e,c as s,o as a,d as n}from"./app.411b39d2.js";const C=JSON.parse('{"title":"Service","description":"","frontmatter":{},"headers":[],"relativePath":"documentation/service.md"}'),t={name:"documentation/service.md"},i=n(`<h1 id="service" tabindex="-1">Service <a class="header-anchor" href="#service" aria-hidden="true">#</a></h1><p>SRE practices can be reduced to their core subject - the abstract version of a software service.</p><p>To precisely and consistently express an abstract service or a service, its parts, and its derivatives, a service must first be defined precisely. <br><br></p><blockquote><p><strong>Formal Definition</strong>: A service <em>S</em> is a finite-state machine of the following quintuple <code>(ServiceStates, ServiceInputs, ServiceStart, ServiceEnd, ServiceTransitionFunction)</code>: <br><br><code>ServiceStates</code> = A set of all <a href="./service-state.html">service states</a> that can happen in S&#39;s lifetime. <br><br><code>ServiceInputs</code> = A set of actions that is generated by a <a href="./service-modifier.html">service modifier</a> and can be fed into a ServiceTransitionFunction. <br><br><code>ServiceTransitionFunction</code> = A logic that takes a service state and a service input as inputs and in turn outputs a service state. <br><br><code>ServiceStart</code> = The starting service state of S. <br><br><code>ServiceEnd</code> = A set of service states that can happen last in S&#39;s lifetime.</p></blockquote><br><p>To reinforce the understanding of a service as a finite-state machine, the following is provided as a practical and intuitive example that describes the data of a naive cloud storage service.</p><br><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">Service: Cloud Storage</span></span>
<span class="line"><span style="color:#A6ACCD;">    ServiceStates:</span></span>
<span class="line"><span style="color:#A6ACCD;">        - name: UploadRequested</span></span>
<span class="line"><span style="color:#A6ACCD;">          description: An upload request was initiated by a client.</span></span>
<span class="line"><span style="color:#A6ACCD;">        - name: Uploading</span></span>
<span class="line"><span style="color:#A6ACCD;">          description: The service is uploading a client&#39;s file data.</span></span>
<span class="line"><span style="color:#A6ACCD;">        - name: UploadFailed</span></span>
<span class="line"><span style="color:#A6ACCD;">          description: The service failed to upload a client&#39;s file data.</span></span>
<span class="line"><span style="color:#A6ACCD;">        - name: UploadFinished</span></span>
<span class="line"><span style="color:#A6ACCD;">          description: The service finished uploading all the client&#39;s file data.</span></span>
<span class="line"><span style="color:#A6ACCD;">    ServiceInputs:</span></span>
<span class="line"><span style="color:#A6ACCD;">        - name: UploadAPIRequest</span></span>
<span class="line"><span style="color:#A6ACCD;">          description: A client requested an upload through the cloud-storage upload API.</span></span>
<span class="line"><span style="color:#A6ACCD;">    ServiceTransitionFunction:</span></span>
<span class="line"><span style="color:#A6ACCD;">        - input: UploadAPIRequest</span></span>
<span class="line"><span style="color:#A6ACCD;">          state: UploadFailed</span></span>
<span class="line"><span style="color:#A6ACCD;">          output: UploadRequested</span></span>
<span class="line"><span style="color:#A6ACCD;">    ServiceStart: UploadRequested</span></span>
<span class="line"><span style="color:#A6ACCD;">    ServiceEnd:</span></span>
<span class="line"><span style="color:#A6ACCD;">        - UploadFinished</span></span>
<span class="line"><span style="color:#A6ACCD;">        - Uploading</span></span>
<span class="line"><span style="color:#A6ACCD;">        - UploadRequested</span></span>
<span class="line"><span style="color:#A6ACCD;">        - UploadFailed</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div>`,8),c=[i];function o(l,p,r,d,A,u){return a(),s("div",null,c)}const h=e(t,[["render",o]]);export{C as __pageData,h as default};
