import{_ as e,c as t,o as a,d as i}from"./app.bc23e01a.js";const u=JSON.parse('{"title":"SRE Science | Monitoring","description":"","frontmatter":{"title":"SRE Science | Monitoring","editLink":false,"head":[["meta",{"name":"Monitoring"},{"content":"What is monitoring?\\n"}]]},"headers":[{"level":2,"title":"Collection","slug":"collection","link":"#collection","children":[]},{"level":2,"title":"Aggregation","slug":"aggregation","link":"#aggregation","children":[]},{"level":2,"title":"Inference","slug":"inference","link":"#inference","children":[]},{"level":2,"title":"Interpretation","slug":"interpretation","link":"#interpretation","children":[]},{"level":2,"title":"Relay","slug":"relay","link":"#relay","children":[]}],"relativePath":"documentation/methods-of-service-state-consumption.md","lastUpdated":1710993048000}'),n={name:"documentation/methods-of-service-state-consumption.md"},o=i('<h1 id="methods-of-service-state-consumption" tabindex="-1">Methods of Service State Consumption <a class="header-anchor" href="#methods-of-service-state-consumption" aria-hidden="true">#</a></h1><p>There can be multiple methods of consuming service states. By &quot;consumption&quot; this simply means how these states are processed. For example, a state could be, but not limited to, aggregated with other states or variables, separated with other states or variables, deleted, updated, interpreted or created.</p><blockquote><p>It is important to know these methods of service state consumption because they are more fundamental than their use cases such as Obervability and Monitoring.</p></blockquote><h1 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h1><p>The following are methods of service state consumption which can be applied to a service or multiple services.</p><h2 id="collection" tabindex="-1">Collection <a class="header-anchor" href="#collection" aria-hidden="true">#</a></h2><p>Collection is a method for collecting states.</p><h2 id="aggregation" tabindex="-1">Aggregation <a class="header-anchor" href="#aggregation" aria-hidden="true">#</a></h2><p>Aggregation is a method for aggregating states</p><h2 id="inference" tabindex="-1">Inference <a class="header-anchor" href="#inference" aria-hidden="true">#</a></h2><p>Inference is a method for inferring sets of variables to a state.</p><h2 id="interpretation" tabindex="-1">Interpretation <a class="header-anchor" href="#interpretation" aria-hidden="true">#</a></h2><p>Interpretation is a method for reading states.</p><h2 id="relay" tabindex="-1">Relay <a class="header-anchor" href="#relay" aria-hidden="true">#</a></h2><p>Relay is a method for relaying states to another consumer.</p>',15),r=[o];function s(c,d,l,h,p,m){return a(),t("div",null,r)}const f=e(n,[["render",s]]);export{u as __pageData,f as default};
