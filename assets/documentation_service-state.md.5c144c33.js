import{_ as e,c as t,o as a,d as s}from"./app.7cf9e878.js";const g=JSON.parse(`{"title":"SRE Science | Service State","description":"","frontmatter":{"title":"SRE Science | Service State","editLink":false,"head":[["meta",{"name":"Service State"},{"content":"A service state St is a set of service variables that can happen in at least one of St's lifetimes.\\n"}]]},"headers":[{"level":2,"title":"Active or Inactive Service State","slug":"active-or-inactive-service-state","link":"#active-or-inactive-service-state","children":[]},{"level":2,"title":"Service State Lifetime","slug":"service-state-lifetime","link":"#service-state-lifetime","children":[]},{"level":2,"title":"Concrete Example","slug":"concrete-example","link":"#concrete-example","children":[]},{"level":2,"title":"Child of a Service","slug":"child-of-a-service","link":"#child-of-a-service","children":[]},{"level":2,"title":"Parent of a Service State","slug":"parent-of-a-service-state","link":"#parent-of-a-service-state","children":[]}],"relativePath":"documentation/service-state.md","lastUpdated":1711000095000}`),n={name:"documentation/service-state.md"},i=s(`<h1 id="service-state" tabindex="-1">Service State <a class="header-anchor" href="#service-state" aria-hidden="true">#</a></h1><blockquote><p><strong>Formal Definition</strong>: A service state <strong>St</strong> is a set of <a href="./service-variable.html">service variables</a> that can happen in at least one of St&#39;s lifetimes.</p></blockquote><h2 id="active-or-inactive-service-state" tabindex="-1">Active or Inactive Service State <a class="header-anchor" href="#active-or-inactive-service-state" aria-hidden="true">#</a></h2><p>An <strong>active service state</strong> St means that it is the current service state and therefore it&#39;s currently happening, otherwise, it is an <strong>inactive service state</strong>.</p><h2 id="service-state-lifetime" tabindex="-1">Service State Lifetime <a class="header-anchor" href="#service-state-lifetime" aria-hidden="true">#</a></h2><p>A service state <strong>St</strong>&#39;s lifetime is the duration that starts from when it was transitioned to by a previous active service state <strong>St - 1</strong> and ends right before it transitions to the next active service state <strong>St + 1</strong>. St can become active at any time depending on the availability of its service&#39;s ServiceTransitionFunctions and the future ServiceInputs encountered, therefore St can have multiple lifetimes.</p><h2 id="concrete-example" tabindex="-1">Concrete Example <a class="header-anchor" href="#concrete-example" aria-hidden="true">#</a></h2><p>An <strong>UploadInProgress</strong> state of a naive cloud storage service can activate and deactivate (or Inactive) and this is equivalent to one lifetime. However, it can get re-activated when a a file is uploaded by a different user thus it can have multiple lifetimes.</p><h2 id="child-of-a-service" tabindex="-1">Child of a Service <a class="header-anchor" href="#child-of-a-service" aria-hidden="true">#</a></h2><p>A service <strong>S</strong>&#39;s <strong>child</strong> is a service state <strong>St</strong> that can happen sometime in S&#39;s lifetime.</p><h2 id="parent-of-a-service-state" tabindex="-1">Parent of a Service State <a class="header-anchor" href="#parent-of-a-service-state" aria-hidden="true">#</a></h2><p>A service <strong>S</strong> is called a <strong>parent</strong> of a service state <strong>St</strong> if and only if St is a child of S. <br></p><p>In practice, a service state can be monitored by monitoring a subset of service variable values. Using the naive cloud storage service example, the values of service variables <strong>totalUploadedBytes</strong>, <strong>uploadTimeElapsed</strong>, and <strong>uploadAverageThroughput</strong> can be used to monitor a <strong>UploadThrouputLow</strong> service state that indicates the service&#39;s current upload throughput is lower than its average upload throughput.</p><p>The following is an illustration of the example in the previous paragraph.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">Kind: ServiceMonitor</span></span>
<span class="line"><span style="color:#A6ACCD;">metadata:</span></span>
<span class="line"><span style="color:#A6ACCD;">  name: &quot;Monitor Low Upload Throughput&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">spec:</span></span>
<span class="line"><span style="color:#A6ACCD;">    - TargetServiceState: UploadThrougputLow</span></span>
<span class="line"><span style="color:#A6ACCD;">    - ServiceVariables:</span></span>
<span class="line"><span style="color:#A6ACCD;">        - name: totalUploadedBytes</span></span>
<span class="line"><span style="color:#A6ACCD;">          description: Real-time count of uploaded file data in bytes</span></span>
<span class="line"><span style="color:#A6ACCD;">        - name: uploadTimeElapsed</span></span>
<span class="line"><span style="color:#A6ACCD;">          description: Total time elapsed since the file data upload started</span></span>
<span class="line"><span style="color:#A6ACCD;">        - name: uploadAverageThroughput</span></span>
<span class="line"><span style="color:#A6ACCD;">          description: Current average file data upload throughput.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div>`,15),r=[i];function o(c,l,p,d,v,h){return a(),t("div",null,r)}const f=e(n,[["render",o]]);export{g as __pageData,f as default};
