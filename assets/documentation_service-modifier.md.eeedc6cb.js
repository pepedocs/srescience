import{_ as e,c as t,o as i,d as s}from"./app.7e97e3a5.js";const g=JSON.parse('{"title":"SRE Science | Service Modifier","description":"","frontmatter":{"title":"SRE Science | Service Modifier","editLink":false,"head":[["meta",{"name":"Service Modifier"},{"content":"Service modifiers mutate service variables.\\n"}]]},"headers":[],"relativePath":"documentation/service-modifier.md"}'),a={name:"documentation/service-modifier.md"},r=s('<h1 id="service-modifier" tabindex="-1">Service Modifier <a class="header-anchor" href="#service-modifier" aria-hidden="true">#</a></h1><blockquote><p><strong>Formal Definition</strong>: A service modifier is anything that can cause a service&#39;s state to transition to another service state, or cause a change of value in at least one of the service variables in a service state. <br></p></blockquote><p>In practice, service actors such as a <strong>customer</strong>, an <strong>engineer</strong> such as an <strong>SRE engineer</strong>, <strong>another service</strong> that operates on a service, or the <strong>service</strong> acting on itself are all considered service modifiers because they can cause a service state to transition to another service state, or cause a change of value in at least one of the service variables in a service state.</p><p>In other words, service modifiers mutate service variables.</p><p>Using the cloud storage service example, when a user uploads a file, such service will probably transition from <strong>UploadRequested</strong> service state to <strong>UploadInProgress</strong> service state while updating the <strong>totalUploadedBytes</strong> service variable.</p><p>Why is a Service Modifier definition important and why not just use a simple concept of a User, Engineer or a Customer? This is so that a definition of a user is clear cut about it being able to modify a service state. By doing this, it effectively includes a &quot;user&quot; in the semantics of a service as a finite-state machine. <br><br></p><blockquote><p><em>Speaking and listening was never a chicken-and-egg situation, the latter must go first to fill the brain.</em>\u200A-\u200AAnonymous</p></blockquote>',7),o=[r];function n(c,d,l,v,u,f){return i(),t("div",null,o)}const m=e(a,[["render",n]]);export{g as __pageData,m as default};
