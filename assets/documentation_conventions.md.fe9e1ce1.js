import{_ as e,c as a,o as i,d as t}from"./app.411b39d2.js";const m=JSON.parse('{"title":"Conventions","description":"","frontmatter":{},"headers":[{"level":3,"title":"Creating axioms","slug":"creating-axioms","link":"#creating-axioms","children":[]},{"level":3,"title":"Writing service names","slug":"writing-service-names","link":"#writing-service-names","children":[]},{"level":3,"title":"Service child","slug":"service-child","link":"#service-child","children":[]},{"level":3,"title":"Practical service data format","slug":"practical-service-data-format","link":"#practical-service-data-format","children":[]},{"level":3,"title":"Parent of a service state","slug":"parent-of-a-service-state","link":"#parent-of-a-service-state","children":[]},{"level":3,"title":"Active Inactive service state","slug":"active-inactive-service-state","link":"#active-inactive-service-state","children":[]}],"relativePath":"documentation/conventions.md"}'),s={name:"documentation/conventions.md"},r=t('<h1 id="conventions" tabindex="-1">Conventions <a class="header-anchor" href="#conventions" aria-hidden="true">#</a></h1><p>Throughout this website, global conventions are used to encourage consistency in the documentation.</p><p>The following are these conventions and can be skipped for now and referenced later as needed.</p><h3 id="creating-axioms" tabindex="-1">Creating axioms <a class="header-anchor" href="#creating-axioms" aria-hidden="true">#</a></h3><p><code>Axioms</code> are created as needed to support a definition.</p><h3 id="writing-service-names" tabindex="-1">Writing service names <a class="header-anchor" href="#writing-service-names" aria-hidden="true">#</a></h3><p>A service state name is written in camelcase form and is an identifier that describes a service state such as UploadInProgress, UploadFailed or UploadFinished.</p><h3 id="service-child" tabindex="-1">Service child <a class="header-anchor" href="#service-child" aria-hidden="true">#</a></h3><p>A service S&#39;s <code>child</code> is a service state s that can happen in sometime in S&#39;s lifetime.</p><h3 id="practical-service-data-format" tabindex="-1">Practical service data format <a class="header-anchor" href="#practical-service-data-format" aria-hidden="true">#</a></h3><p>Practical examples for service data such as service, service states, etc are presented in YAML format for usability and interoperability purposes.</p><h3 id="parent-of-a-service-state" tabindex="-1">Parent of a service state <a class="header-anchor" href="#parent-of-a-service-state" aria-hidden="true">#</a></h3><p>A service S is called a <code>parent</code> of service state St if and only if St is a child of S.</p><h3 id="active-inactive-service-state" tabindex="-1">Active Inactive service state <a class="header-anchor" href="#active-inactive-service-state" aria-hidden="true">#</a></h3><p>An active service state means that a service state is the current state of its parent service while an inactive service state means the opposite case.</p>',15),c=[r];function n(o,d,l,h,v,p){return i(),a("div",null,c)}const u=e(s,[["render",n]]);export{m as __pageData,u as default};
