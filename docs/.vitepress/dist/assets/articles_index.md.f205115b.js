import{_ as e,o as t,c as a,d as s}from"./app.b86be3aa.js";const u=JSON.parse('{"title":"What is Service Reliability?","description":"","frontmatter":{},"headers":[{"level":2,"title":"Tr_Expected","slug":"tr-expected","link":"#tr-expected","children":[]},{"level":2,"title":"Tr_Actual","slug":"tr-actual","link":"#tr-actual","children":[]},{"level":2,"title":"Tr_Target","slug":"tr-target","link":"#tr-target","children":[]},{"level":2,"title":"Service Reliability","slug":"service-reliability","link":"#service-reliability","children":[]},{"level":2,"title":"Relation of Service Level Objectives and Tr_Target","slug":"relation-of-service-level-objectives-and-tr-target","link":"#relation-of-service-level-objectives-and-tr-target","children":[]}],"relativePath":"articles/index.md"}'),i={name:"articles/index.md"},r=s(`<h1 id="what-is-service-reliability" tabindex="-1">What is Service Reliability? <a class="header-anchor" href="#what-is-service-reliability" aria-hidden="true">#</a></h1><blockquote><p><strong>Formal Definition</strong>: Service reliability is equal to the weighted sum of the probabilities of actual state transitions of a service complying with the expected state transitions of the same service.</p></blockquote><p>Before we can define service reliability we have to define first a few other important characteristics of a service.</p><h2 id="tr-expected" tabindex="-1">Tr_Expected <a class="header-anchor" href="#tr-expected" aria-hidden="true">#</a></h2><p>A set of service state transitions that are expected to happen during a service&#39;s lifetime.</p><p><code>Tr_Expected = {TrE\u2080, TrE\u2081,\u2026,TrE\u1D62}</code></p><p>Each service state transition TrE\u1D62 is a triple composed of the start state, end state, and the input which when consumed by the start state will cause it to transition to the end state.</p><p><code>TrE\u1D62 = {TrE_StartState\u1D62, TrE_EndState\u1D62, TrE_Input\u1D62}</code></p><p><strong>Concrete Example</strong> In practice, these expected service state transitions are the expected behavior of any aspect of a service due to how it was designed as a software service solving a particular business problem. For example, an online banking website must enable its users to log in (start state) using a login form, and when the login is successful it must present the user with a home page (end state) that contains a summary of his or her transactions.</p><h2 id="tr-actual" tabindex="-1">Tr_Actual <a class="header-anchor" href="#tr-actual" aria-hidden="true">#</a></h2><p>A set of service state transitions that have happened during a service&#39;s lifetime.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">Tr_Actual = {TrA\u2080, TrA\u2081,\u2026,TrA\u1D62}</span></span>
<span class="line"><span style="color:#A6ACCD;">TrA\u1D62 = {TrA_Instance\u2080, TrA_Instance\u2081,\xA0\u2026, TrA_Instance\u1D62}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Tr_Actual&#39;s member TrA\u1D62 is a set of service state transitions that have happened in a service&#39;s lifetime. Each of these state transitions is called a TrA_Instance.</p><blockquote><p><strong>Important</strong> TrE\u1D62 expects compliance for every TrA_Instance\u1D62.</p></blockquote><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">TrA_Instance\u1D62 = {TrE_StartState\u1D62, TrE_EndState\u2093, TrE_Input\u1D62}</span></span>
<span class="line"><span style="color:#A6ACCD;">TrE\u1D62 = {TrE_StartState\u1D62, TrE_EndState\u1D62, TrE_Input\u1D62}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Given TrA_Instance\u1D62 and TrE\u1D62, x in TrE_Endstate subscript is a variable because there can be varied end states in actual state transitions in a service.</p><p>The following is the TrE_Compliance function that returns a value of 0 or 1 where 0 means TrA_Instance\u1D62 has failed to comply to TrE\u1D62, otherwise 1 means the opposite.</p><p><code>TrE_Compliance(TrA_Instance\u1D62, TrE\u1D62) = 1 or 0</code></p><blockquote><p><strong>Important</strong> When TrE_EndState\u2093 is equal to TrE_EndState\u1D62, then TrA_Instance\u1D62 is equal to TrE\u1D62. In this case, TrE_Compliance is equal to 1, otherwise 0.</p></blockquote><h2 id="tr-target" tabindex="-1">Tr_Target <a class="header-anchor" href="#tr-target" aria-hidden="true">#</a></h2><p>A set of target service state transition probabilities.</p><p>A member of Tr_Target is a probability of an actual state transition to comply with its corresponding expected state transition. As you might see now the instances of Tr_Actual&#39;s members can be viewed as probabilistic events therefore we can calculate their probabilities.</p><p>An example of a Tr_Target with concrete probability values.</p><p><code>Tr_Target = {P(TrA, TrE)\u2080 = 0.99, P(TrA, TrE)\u2081 = 0.95,\u2026,P(TrA, TrE)\u1D62 = 0.999}</code></p><p>At this point, we can now define service reliability or SR.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">SR = P(TrA, TrE)\u2080 * RW\u2080 + P(TrA, TrE)\u2081 * RW\u2081 +\xA0\u2026 P(TrA, TrE)\u1D62 * RW\u1D62\xA0, or</span></span>
<span class="line"><span style="color:#A6ACCD;">SR = RW * Tr_Target</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Where RW\u1D62 or reliability weight is a weight that denotes the importance of a certain state transition compliance. We can now, therefore, define service reliability.</p><h2 id="service-reliability" tabindex="-1">Service Reliability <a class="header-anchor" href="#service-reliability" aria-hidden="true">#</a></h2><p>The weighted sum of the probabilities of actual state transitions of a service complying with the expected state transitions of the same service.</p><h2 id="relation-of-service-level-objectives-and-tr-target" tabindex="-1">Relation of Service Level Objectives and Tr_Target <a class="header-anchor" href="#relation-of-service-level-objectives-and-tr-target" aria-hidden="true">#</a></h2><p>An SLO is basically a proportion of good events over all events that happened during a service&#39;s SLO time window. From a service reliability equation perspective, an SLO is basically one of the Tr_Targets with a specific compliance evaluation window.</p><p><strong>Concrete Example</strong> Let us say we have an SLO of SUM_NON_5XX_HTTP_REQUESTS / SUM_ALL_HTTP_REQUESTS that must be 99%. The SUM_NON_5XX_HTTP_REQUESTS is the service state transitions TrA\u1D62 that complied with TrE\u1D62 and the SUM_NON_5XX_HTTP_REQUESTS is all the service state transitions that happen in a service&#39;s lifetime. Dividing these two variables is equivalent to the sum of favorable events over the total events which is basically a function to get the probability of the numerator.</p>`,32),n=[r];function o(c,l,p,h,d,T){return t(),a("div",null,n)}const _=e(i,[["render",o]]);export{u as __pageData,_ as default};
